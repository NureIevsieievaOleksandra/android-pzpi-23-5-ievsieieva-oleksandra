МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ




Звіт
з практичної роботи № 2 з дисципліни
Програмування під Android
   





Виконала:                                                                                     Перевірив:
ст. гр. ПЗПІ-23-5                        				ст. викладач кафедри ПІ
Євсєєва Олександра						Сокорчук Ігор Петрович









Харків 2024
Завдання

1.	Розмітка екрана
1.1.	Підготовка робочого середовища
1.2.	Практика з Linear/Constraint-Layout
1.3.	Практика з атрибутами елементів
1.4.	Обробка подій
2.	Файли розмітки Layout
2.1.	Створення різних Layout
2.2.	Практика роботи з атрибутами
3.	Життєвий цикл та методи Activity
3.1.	Ознайомлення з життєвим циклом Activity
3.2.	Дослідження методів життєвого циклу
3.3.	Вивчення поведінки Activity при зміні орієнтації екрана
3.4.	Практичне завдання з ручного збереження стану
3.5.	Дослідження переходу між Activity
3.6.	Обробка завершення Activity 
Хід роботи

1.	Розмітка екрана
Відкрийте Android Studio та створіть новий проєкт, вибравши шаблон Empty Views Activity. Відкрийте файл res/layout/activity_main.xml. [додаток А]
Практика з LinearLayout: cтворіть розмітку, що містить кілька кнопок, розташованих одна під одною. Використайте властивості orientation для вертикальної орієнтації. Задайте для кожної кнопки властивості layout_width та layout_height, експериментуйте з різними значеннями, як wrap_content та match_parent. Використовуйте властивості weight.
Практика з ConstraintLayout: розмістіть елементи на екрані, використовуючи обмеження для позиціонування (constraints), щоб задати їх взаємне розташування. У моєму випадку я розташовувала інші розмітки усередині цієї розмітки.
Практика з RelativeLayout: розмістіть кілька елементів відносно один одного, використовуючи атрибути, такі як layout_below, layout_toRightOf.
Практика з FrameLayout: додайте кілька елементів, щоб побачити, як вони накладаються один на одного.
Практика з GridLayout: розмістіть текстові поля та кнопки у вигляді таблиці, задаючи кількість стовпців і рядків.
Використовуємо такі атрибути, як padding, margin, gravity та layout_gravity для налаштування відступів та вирівнювання елементів.	 Налаштовуємо текстові поля.
2.	Обробка подій.
Додайте до кнопки обробник події натискання у файлі MainActivity.java.
1. public void onButtonClick(View v) {
2.    Button button = findViewById(R.id.button1);
3.    button.setText(getString(R.string.newButtonName));
4.}

У файлі activity_main.xml додайте атрибут android:onClick="onButtonClick" до кнопки, а в класі MainActivity створіть відповідний метод onButtonClick.
1. android:onClick="onButtonClick"

3.	Життєвий цикл та методи Activity
Додайте до кожного методу життєвого циклу (onCreate, onStart, onResume тощо) функцію виведення повідомлень у лог (Log.d) для відстеження послідовності викликів. Всі вони однакові, тож приведу лише один як приклад:
1.        Log.d(TAG, "onStart: ");
Змініть орієнтацію пристрою (з портретної на ландшафтну) та спостерігайте за викликами методів життєвого циклу у логах.
Дослідіть, як зміна орієнтації перезапускає Activity (викликаються методи onPause(), onStop(), onDestroy(), а потім onCreate(), onStart(), onResume()).
Додайте в Activity поле для введення тексту (наприклад, EditText).
При зміні орієнтації екрана текст у полі буде очищено, оскільки Activity перезавантажується.
Але воно не буде затерто створено знову, якщо дати полю унікальний id. Отже, методичні вказівки трохи помилюяться.
Було реалізовано збереження та відновлення вручну у додатковому завданні. Було створено клікер, що зберігаю кількість кліків.
1.    public void onIncreaseCounter(View v) {
2.        TextView count = findViewById(R.id.count);
3.        Integer previousCounter = Integer.parseInt(count.getText().toString());
4.        Integer newValue = previousCounter + 1;
5.        count.setText(newValue.toString());
6.    }

Зберігається за допомгою:
1.protected void onSaveInstanceState(@NonNull Bundle outState) {
2.        TextView count = findViewById(R.id.count);
3.        outState.putString("counter", count.getText().toString());
4.        super.onSaveInstanceState(outState);
Відновлюється за допогою:
1.    protected void onRestoreInstanceState(@NonNull Bundle savedInstanceState){
2.        super.onRestoreInstanceState(savedInstanceState);
3.        TextView count = findViewById(R.id.count);
4.        count.setText(savedInstanceState.getString("counter"));
5.    }

Створіть друге Activity у вашому застосунку.
Додайте кнопку для переходу до другого Activity.
Відстежте виклики методів життєвого циклу при переході між Activity.
Додайте кнопку для завершення Activity (виклик методу finish()).
1.    public void onFinishClick(View v) {
2.        finish();
3.    }

 
Висновки
Під час практичної роботи було досліджено: створення та налаштування різних розміток, використовуючи XML-файли. Виявлено, як компоненти та атрибути взаємодіють між собою.
Ознайомилися із життєвим циклом компонентів Activity у застосунках Android. Навчилися керувати станами Activity через використання ключових методів життєвого циклу.
Відеозвіт на YouTube. URL: https://youtu.be/jZjEamo40Ic 

 
Використані джерела

1.	Методичні вказівки до практичних занять: Розмітка екрана в Android. URL: https://dl.nure.ua/mod/page/view.php?id=599542 (дата звернення: 07.10.2024)
2.	Методичні вказівки до практичних занять: Файли розмітки Layout. URL: https://dl.nure.ua/mod/page/view.php?id=599543 (дата звернення: 07.10.2024)
3.	Методичні вказівки до практичного заняття: Життєвий цикл та методи Activity. URL: https://dl.nure.ua/mod/page/view.php?id=599544 (дата звернення: 07.10.2024)
 
Додаток А

Файл розмітки.
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">
    <TextView
        android:id="@+id/text1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Hello World!"
        android:textSize="32sp"
        android:textStyle="bold"
        android:textColor="@color/textcolor"
        app:layout_constraintBottom_toTopOf="@+id/button1"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_chainStyle="spread"/>
    <Button
        android:id="@+id/button1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/button1Name"
        android:onClick="onButtonClick"
        app:layout_constraintTop_toBottomOf="@id/text1"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintBottom_toTopOf="@id/image1"
        app:layout_constraintVertical_chainStyle="spread"
        />
    <ImageView
        android:id="@+id/image1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:layout_constraintTop_toBottomOf="@+id/button1"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintBottom_toTopOf="@id/ll"
        app:layout_constraintVertical_chainStyle="spread"
        android:src="@drawable/cat"
        />
    <LinearLayout
        android:id="@+id/ll"
        android:layout_marginStart="30dp"
        android:layout_marginEnd="30dp"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        app:layout_constraintBottom_toTopOf="@id/gl"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@id/image1">

        <Button
            android:id="@+id/button2"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/button1Name"
            />
        <Button
            android:id="@+id/button3"
            android:padding="5dp"
            android:layout_gravity="center"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/button1Name"
            />
        <Button
            android:id="@+id/button4"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/button1Name"
            />
    </LinearLayout>
    <GridLayout
        android:id="@+id/gl"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:columnCount="3"
        android:layout_marginStart="16dp"
        android:layout_marginEnd="16dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@id/ll">
        <Button android:text="1" android:onClick="onButtonClickOther"/>
        <Button android:text="2" android:onClick="onButtonClickOther"/>
        <Button android:text="3" android:onClick="onButtonClickOther"/>
        <Button android:text="4" android:onClick="onButtonClickOther"/>
        <Button android:text="5" android:onClick="onButtonClickOther"/>
        <ImageView
            android:id="@+id/image2"
            android:layout_width="50dp"
            android:layout_height="50dp"
            android:src="@drawable/cat"/>
        <TextView
            android:id="@+id/text2"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Hello World!"
            android:textColor="@color/textcolor"/>
    </GridLayout>
</androidx.constraintlayout.widget.ConstraintLayout>
